---
- name: Automatic setup SSH for user
  become: true
  when:
    - ssh_user is defined
    - ssh_user | length > 0
    - ssh_user.manage_ssh_key
  block:
    - name: Check user ssh directory exists.
      ansible.builtin.stat:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh"
      register: ssh_dir

    - name: Create SSH directory for user {{ ssh_user.name }}.
      ansible.builtin.file:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh"
        state: directory
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        recurse: yes
        mode: "0700"
      when: not ssh_dir.stat.exists

    - name: Create a 4096-bit ssh key for user {{ ssh_user.name }}
      ansible.builtin.user:
        name: "{{ ssh_user.name }}"
        generate_ssh_key: yes
        ssh_key_bits: 4096
        ssh_key_file: .ssh/id_rsa
        force: no
      failed_when: false
      no_log: true

    - name: Set authorized key taken from file for user {{ ssh_user.name }}
      ansible.posix.authorized_key:
        user: "{{ ssh_user.name }}"
        state: "{{ item.state }}"
        key: "{{ item.key }}"
      loop: "{{ ssh_user.authorized_keys }}"
      loop_control:
        label: "{{ ssh_user.name }}"
      failed_when: false
      no_log: true
      when:
        - ssh_user.authorized_keys is defined
        - ssh_user.authorized_keys | length > 0
        - ssh_user.manage_ssh_key

    - name: Check ssh config file for user {{ ssh_user.name }}
      ansible.builtin.stat:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/config"
      register: ssh_user_config_file

    - name: Setup ssh config for user {{ ssh_user.name }}
      ansible.builtin.template:
        src: ssh_user_config.j2
        dest: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/config"
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        mode: 0600
      register: ssh_user_config_setup
      when: not ssh_user_config_file.stat.exists

    - name: Reload ssh service
      ansible.builtin.debug:
        msg: "Reload ssh service"
      notify: (Handler) Restart SSH
      when: ssh_user_config_setup.changed or ssh_private_key_setup.changed

  rescue:
    - name: Automatic setup ssh errors
      ansible.builtin.debug:
        msg: "I caught an error, can do stuff here to fix it, :-)"

- name: Manual setup ssh
  become: true
  when:
    - ssh_user is defined
    - ssh_user | length > 0
    - not ssh_user.manage_ssh_key
  block:
    - name: Check user ssh directory exists
      ansible.builtin.stat:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh"
      register: ssh_dir

    - name: Create ssh directory for user {{ ssh_user.name }}.
      ansible.builtin.file:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh"
        state: directory
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        recurse: yes
        mode: "0700"
      when: not ssh_dir.stat.exists

    - name: Check ssh id_rsa file for user {{ ssh_user.name }}.
      ansible.builtin.stat:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/id_rsa"
      register: private_key_file

    - name: Create ssh id_rsa file for user {{ ssh_user.name }}
      ansible.builtin.file:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/id_rsa"
        state: touch
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        mode: "0644"
      when: not private_key_file.stat.exists
      register: creating_private_key_file

    - name: Copy ssh private key for user {{ ssh_user.name }}
      ansible.builtin.copy:
        content: "{{ ssh_user.private_key }}"
        dest: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/id_rsa"
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        mode: "0600"
      failed_when: false
      no_log: true
      register: ssh_private_key_setup
      when: creating_private_key_file.changed # noqa: no-handler

    - name: Check ssh id_rsa.pub file for user {{ ssh_user.name }}.
      ansible.builtin.stat:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/id_rsa.pub"
      register: public_key_file

    - name: Create ssh id_rsa.pub file for user {{ ssh_user.name }}
      ansible.builtin.file:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/id_rsa.pub"
        state: touch
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        mode: "0644"
      when: not public_key_file.stat.exists
      register: creating_public_key_file

    - name: Copy ssh public key for user {{ ssh_user.name }}
      ansible.builtin.copy:
        content: "{{ ssh_user.public_key }}"
        dest: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/id_rsa.pub"
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        mode: "0600"
      failed_when: false
      no_log: true
      register: ssh_public_key_setup
      when: creating_public_key_file.changed # noqa: no-handler

    - name: Set authorized key taken from file for user {{ ssh_user.name }}
      ansible.posix.authorized_key:
        user: "{{ ssh_user.name }}"
        state: "{{ item.state }}"
        key: "{{ item.key }}"
      loop: "{{ ssh_user.authorized_keys }}"
      loop_control:
        label: "{{ ssh_user.name }}"
      failed_when: false
      no_log: true
      when:
        - ssh_user.authorized_keys is defined
        - ssh_user.authorized_keys | length > 0

    - name: Check ssh config file for user {{ ssh_user.name }}
      ansible.builtin.stat:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/config"
      register: ssh_user_config_file

    - name: Setup ssh config for user {{ ssh_user.name }}
      ansible.builtin.template:
        src: ssh_user_config.j2
        dest: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/config"
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        mode: 0600
      register: ssh_user_config_setup
      when: not ssh_user_config_file.stat.exists

    - name: Reload ssh service
      ansible.builtin.debug:
        msg: "Reload ssh service"
      notify: (Handler) Restart SSH
      when: ssh_user_config_setup.changed or ssh_private_key_setup.changed or ssh_public_key_setup.changed

  rescue:
    - name: Manual setup ssh errors
      ansible.builtin.debug:
        msg: "I caught an error, can do stuff here to fix it, :-)"

---
- name: SSH | Automatic setup SSH for user
  block:
    - name: SSH | Check {{ ssh_user.name }} SSH directory exists.
      ansible.builtin.stat:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh"
      register: ssh_dir

    - name: SSH | Create SSH directory for user {{ ssh_user.name }}.
      ansible.builtin.file:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh"
        state: directory
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        recurse: yes
        mode: "0700"
      when: not ssh_dir.stat.exists

    - name: SSH | Create a 4096-bit SSH key for user {{ ssh_user.name }} in ~{{ ssh_user.name }}/.ssh/id_rsa
      ansible.builtin.user:
        name: "{{ ssh_user.name }}"
        generate_ssh_key: yes
        ssh_key_bits: 4096
        ssh_key_file: .ssh/id_rsa
        force: no

    - name: SSH | Set authorized key taken from file for user {{ ssh_user.name }}
      ansible.posix.authorized_key:
        user: "{{ ssh_user.name }}"
        state: "{{ item.state }}"
        key: "{{ item.key }}"
      loop: "{{ ssh_user.authorized_keys }}"
      loop_control:
        label: "{{ ssh_user.name }}"
      when:
        - ssh_user.authorized_keys != "{}"
        - ssh_user.manage_ssh_key

    - name: SSH | Check SSH config file for user {{ ssh_user.name }}
      ansible.builtin.stat:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/config"
      register: ssh_user_config_file

    - name: SSH | Setup SSH config for user {{ ssh_user.name }}
      ansible.builtin.template:
        src: ssh_user_config.j2
        dest: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/config"
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        mode: 0600
      register: ssh_user_config_setup
      when: not ssh_user_config_file.stat.exists

    - name: SSH | Reload SSH service
      ansible.builtin.debug:
        msg: "Reload ssh service"
      notify: restart ssh
      when: ssh_user_config_setup.changed or ssh_private_key_setup.changed

  become: true
  when:
    - ssh_user != "{}"
    - ssh_user.manage_ssh_key

  rescue:
    - name: SSH | Automatic setup SSH errors
      ansible.builtin.debug:
        msg: "I caught an error, can do stuff here to fix it, :-)"

- name: SSH | Manual setup SSH
  block:
    - name: SSH | Check {{ ssh_user.name }} SSH directory exists.
      ansible.builtin.stat:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh"
      register: ssh_dir

    - name: SSH | Create SSH directory for user {{ ssh_user.name }}.
      ansible.builtin.file:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh"
        state: directory
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        recurse: yes
        mode: "0700"
      when: not ssh_dir.stat.exists

    - name: SSH | Check SSH id_rsa file for user {{ ssh_user.name }}.
      ansible.builtin.stat:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/id_rsa"
      register: private_key_file

    - name: SSH | Create SSH id_rsa file for user {{ ssh_user.name }}
      ansible.builtin.file:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/id_rsa"
        state: touch
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        mode: "0644"
      when: not private_key_file.stat.exists
      register: creating_private_key_file

    - name: SSH | Copy SSH private key for user {{ ssh_user.name }}
      ansible.builtin.copy:
        content: "{{ ssh_user.private_key }}"
        dest: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/id_rsa"
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        mode: "0600"
      register: ssh_private_key_setup
      when: creating_private_key_file.changed

    - name: SSH | Check SSH id_rsa.pub file for user {{ ssh_user.name }}.
      ansible.builtin.stat:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/id_rsa.pub"
      register: public_key_file

    - name: SSH | Create SSH id_rsa.pub file for user {{ ssh_user.name }}
      ansible.builtin.file:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/id_rsa.pub"
        state: touch
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        mode: "0644"
      when: not public_key_file.stat.exists
      register: creating_public_key_file

    - name: SSH | Copy SSH public key for user {{ ssh_user.name }}
      ansible.builtin.copy:
        content: "{{ ssh_user.public_key }}"
        dest: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/id_rsa.pub"
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        mode: "0600"
      register: ssh_public_key_setup
      when: creating_public_key_file.changed

    - name: SSH | Set authorized key taken from file for user {{ ssh_user.name }}
      ansible.posix.authorized_key:
        user: "{{ ssh_user.name }}"
        state: "{{ item.state }}"
        key: "{{ item.key }}"
      loop: "{{ ssh_user.authorized_keys }}"
      loop_control:
        label: "{{ ssh_user.name }}"
      when:
        - ssh_user.authorized_keys != "{}"

    - name: SSH | Check SSH config file for user {{ ssh_user.name }}
      ansible.builtin.stat:
        path: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/config"
      register: ssh_user_config_file

    - name: SSH | Setup SSH config for user {{ ssh_user.name }}
      ansible.builtin.template:
        src: ssh_user_config.j2
        dest: "{{ ssh_user.home_dir | default('/home/') }}{{ ssh_user.name }}/.ssh/config"
        owner: "{{ ssh_user.name }}"
        group: "{{ ssh_user.name }}"
        mode: 0600
      register: ssh_user_config_setup
      when: not ssh_user_config_file.stat.exists

    - name: SSH | Reload SSH service
      ansible.builtin.debug:
        msg: "Reload ssh service"
      notify: restart ssh
      when: ssh_user_config_setup.changed or ssh_private_key_setup.changed or ssh_public_key_setup.changed

  become: true
  when:
    - ssh_user != "{}"
    - not ssh_user.manage_ssh_key

  rescue:
    - name: SSH | Manual setup SSH errors
      ansible.builtin.debug:
        msg: "I caught an error, can do stuff here to fix it, :-)"
